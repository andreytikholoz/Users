/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ua.task.test.api;

import java.util.Date;
import ua.task.test.model.UserDTO;
import ua.task.test.model.UserListDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-13T19:23:31.572389100+03:00[Europe/Helsinki]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : createUser
     *
     * @param userDTO  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "createUser", nickname = "createUser", notes = "", response = UserDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = UserDTO.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserDTO> createUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UserDTO userDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"birth_date\" : \"2021-01-30T00:00:00.000+0000\", \"last_name\" : \"last_name\", \"phone_number\" : \"phone_number\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"user@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user : deleteUser
     *
     * @param id  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "deleteUser", nickname = "deleteUser", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation") })
    @RequestMapping(value = "/user",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUser(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /user : editUser
     *
     * @param userDTO  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "editUser", nickname = "editUser", notes = "", response = UserDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = UserDTO.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<UserDTO> editUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UserDTO userDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"birth_date\" : \"2021-01-30T00:00:00.000+0000\", \"last_name\" : \"last_name\", \"phone_number\" : \"phone_number\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"user@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user : getUserList
     *
     * @param birthDate1  (required)
     * @param birthDate2  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "getUserList", nickname = "getUserList", notes = "", response = UserListDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = UserListDTO.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserListDTO> getUserList(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "birth_date1", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) Date birthDate1,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "birth_date2", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) Date birthDate2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"users\" : [ { \"address\" : \"address\", \"birth_date\" : \"2021-01-30T00:00:00.000+0000\", \"last_name\" : \"last_name\", \"phone_number\" : \"phone_number\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"user@example.com\" }, { \"address\" : \"address\", \"birth_date\" : \"2021-01-30T00:00:00.000+0000\", \"last_name\" : \"last_name\", \"phone_number\" : \"phone_number\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"user@example.com\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user : replaceUser
     *
     * @param userDTO  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "replaceUser", nickname = "replaceUser", notes = "", response = UserDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = UserDTO.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<UserDTO> replaceUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UserDTO userDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"birth_date\" : \"2021-01-30T00:00:00.000+0000\", \"last_name\" : \"last_name\", \"phone_number\" : \"phone_number\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"user@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
