/* eslint @typescript-eslint/no-unused-vars: off */
/**
 * ua.task.test.Users
 * Test task in the Ð¡lear Solutions
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tikholoz01@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    UserDTO,
    UserListDTO,
} from "./model";

import { BaseAPI } from "./base";

export interface ApplicationApis {
    defaultApi: DefaultApiInterface;
}

/**
 * DefaultApi - object-oriented interface
 */
export interface DefaultApiInterface {
    /**
     *
     * @summary createUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof DefaultApi
     */
    createUser(params?: {
        userDTO: UserDTO;
    }): Promise<UserDTO>;
    /**
     *
     * @summary deleteUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof DefaultApi
     */
    deleteUser(params?: {
        queryParams?: { id: string,  };
    }): Promise<void>;
    /**
     *
     * @summary editUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof DefaultApi
     */
    editUser(params?: {
        userDTO: UserDTO;
    }): Promise<UserDTO>;
    /**
     *
     * @summary getUserList
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof DefaultApi
     */
    getUserList(params?: {
        queryParams?: { birth_date1: Date, birth_date2: Date,  };
    }): Promise<UserListDTO>;
    /**
     *
     * @summary replaceUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof DefaultApi
     */
    replaceUser(params?: {
        userDTO: UserDTO;
    }): Promise<UserDTO>;
}

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     *
     * @summary createUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async createUser(params: {
        userDTO: UserDTO;
    }): Promise<UserDTO> {
        return await this.POST(
            "/user",
            {},
            { body: params.userDTO, contentType: "application/json" }
        );
    }
    /**
     *
     * @summary deleteUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async deleteUser(params: {
        queryParams?: { id: string,  };
    }): Promise<void> {
        return await this.DELETE(
            "/user",
            params && params.queryParams,
        );
    }
    /**
     *
     * @summary editUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async editUser(params: {
        userDTO: UserDTO;
    }): Promise<UserDTO> {
        return await this.PATCH(
            "/user",
            {},
            { body: params.userDTO, contentType: "application/json" }
        );
    }
    /**
     *
     * @summary getUserList
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async getUserList(params: {
        queryParams?: { birth_date1: Date, birth_date2: Date,  };
    }): Promise<UserListDTO> {
        return await this.GET(
            "/user",
            params && params.queryParams,
        );
    }
    /**
     *
     * @summary replaceUser
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async replaceUser(params: {
        userDTO: UserDTO;
    }): Promise<UserDTO> {
        return await this.PUT(
            "/user",
            {},
            { body: params.userDTO, contentType: "application/json" }
        );
    }
}

export const servers: ApplicationApis[] = [
    {
        defaultApi: new DefaultApi("/"),
    },
];

